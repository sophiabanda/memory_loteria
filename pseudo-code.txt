 DEFINE REQUIRED CONSTANTS:
Card options


DEFINE STATE VARIABLES:
Player selection
Define the initial “board” with 12 individual 
card backs (they should be positioned at random)
Game timer (2min) or countdown
Initial amount of guesses allotted (5?)

CACHED ELEMENTS:
Start button
Reset button - you can use the restart button any time
Welcome header

ACTIONS:
Render board: All cards face down.
"Press start to start.."

Once the start button is pressed, all 12 cards 
flip over for 1.5 seconds to give you a chance to memorize

A player selects a card
The card briefly flips over (2 seconds?), then back over
The player selects another card

    If it’s a match, the card remains upright with image showing
        If it’s not a match, a point is subtracted from available guesses

    If player runs out of guesses
        If player runs out of time
            Some womp womp event happens

If player wins
    Some celebratory event happens


CSS TO IMPLEMENT
- LEFT COLUMN FOR TIMER AND 


STRETCH GOALS:
- Card animation; maybe cards rotate at win/loss, etc
- Surprise if you win with a certain card
- Add cursor image of either Valentina or Cholula sauce
- Ensure accessibilty to the best of ability









Ideas from Jim's Concentration walkthrough video. Watch once you have yours fleshed out.
https://www.youtube.com/watch?v=x3PurspM8_8

- IMG ELEMENTS instead of DIVS
    - empty src att, id's of #'s, empty alt att


WORK NOTES:

___________________________________________________________________________
function shuffleCards() {
  //Fisher-Yates sorting algo
  for (let i = cardOptions.length - 1; i > 0; i--) {
    // start at second to last #, work back up to 1, not 0
    // I'm not sure why we leave out the first and last, 
    // though might be to do with Math

    const j = Math.floor(Math.random() * (i + 1));
    // assign a random number to j by multiplying by i+1 
    (I think to make up for leaving off 1st and last indicies)

    const temporary = cardOptions[i];
    // create a temp var to hold the value of first looped idx

    cardOptions[i] = cardOptions[j];
    // reassign the value of that index with the randomized index
    cardOptions[j] = temporary;
    // assign the found randomized idx to the temp idx and repeat process
    
  }
  return cardOptions;
}

___________________________________________________________________________
// Yi Chien's algorigthm 
function shuffleCards() {
  const tempDeck = Object.values(cardOptions);
  newShuffledDeck = [];
  while (tempDeck.length) {
    const rndIdx = Math.floor(Math.random() * tempDeck.length);
    newShuffledDeck.push(tempDeck.splice(rndIdx, 1)[0]);
  }
  return newShuffledDeck;
}

___________________________________________________________________________

   if (imgOption.hidden === true) {
      cards[idx].setAttribute('src', backOfCard);
    } else {
      cards[idx].setAttribute('src', imgOption.img);
    }
